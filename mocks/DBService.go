// Code generated by mockery v2.5.1. DO NOT EDIT.

package mocks

import (
	cb "github.com/m4x1202/collaborative-book"
	mock "github.com/stretchr/testify/mock"
)

// DBService is an autogenerated mock type for the DBService type
type DBService struct {
	mock.Mock
}

// GetPlayerItems provides a mock function with given fields: room
func (_m *DBService) GetPlayerItems(room string) (cb.PlayerItemList, error) {
	ret := _m.Called(room)

	var r0 cb.PlayerItemList
	if rf, ok := ret.Get(0).(func(string) cb.PlayerItemList); ok {
		r0 = rf(room)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cb.PlayerItemList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(room)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveConnection provides a mock function with given fields: connectionID
func (_m *DBService) RemoveConnection(connectionID string) error {
	ret := _m.Called(connectionID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(connectionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemovePlayerItem provides a mock function with given fields: player
func (_m *DBService) RemovePlayerItem(player cb.PlayerItem) error {
	ret := _m.Called(player)

	var r0 error
	if rf, ok := ret.Get(0).(func(cb.PlayerItem) error); ok {
		r0 = rf(player)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResetPlayerItem provides a mock function with given fields: player
func (_m *DBService) ResetPlayerItem(player *cb.PlayerItem) error {
	ret := _m.Called(player)

	var r0 error
	if rf, ok := ret.Get(0).(func(*cb.PlayerItem) error); ok {
		r0 = rf(player)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePlayerItem provides a mock function with given fields: player
func (_m *DBService) UpdatePlayerItem(player *cb.PlayerItem) error {
	ret := _m.Called(player)

	var r0 error
	if rf, ok := ret.Get(0).(func(*cb.PlayerItem) error); ok {
		r0 = rf(player)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
